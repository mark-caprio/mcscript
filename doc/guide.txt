mcscript guide

M. A. Caprio
Department of Physics, University of Notre Dame

Last modified 6/13/16

----------------------------------------------------------------

  Environment setup
  
  Scripts which use mcscript should be launched using the qsubm
  utility.  This utility requires several configuration variables,
  with names of the form "QSUBM_*", to be defined in the environment.
  These variables are documented in the qsubm online help message.
  See also example definitions below.

  The Python interpreter which is running the job script must be
  able to find mcscript and its subsidiary modules.  It will therefore
  typically be necessary to set the environment variable PYTHONPATH to
  reflect this.

  A typical setup in a .cshrc initialization file would be:

    # configure python
    module load python
    module load mpi4py

    # mcscript/qsubm configuration
    # Note: this setenv PYTHONPATH appends to path defined above by module load mpi4py
    setenv PYTHONPATH ${HOME}/runs/mcscript:${PYTHONPATH}
    setenv QSUBM_RUN_HOME ${HOME}/runs
    setenv QSUBM_LAUNCH_HOME ${HOME}/runs
    setenv QSUBM_SCRATCH_HOME ${SCRATCH}/runs
    setenv QSUBM_RUN_PREFIX run

  Note that the Python interpreter which runs the job file may
  variously be running on the front end, a dedicated script node, or a
  compute node, depending on how the job is invoked.  Compute nodes
  may have poor access to the home filesystem, and even searching
  within the directory may be a slow process.  In such instances, it
  is therefore recommended (from hard experience) that the number of
  files in the directories in the Python search path be kept to a
  minimum, e.g., just the mcscript files.

  Local scripting setup

  It is also necessary to provide local definitions (i.e., specific to
  the local cluster and user) via the module file mcscript_local.py.
  The template file provided with this package should be modified as
  appropriate and placed in the Python search path (e.g., most simply,
  with the other mcscript files).

  Instructions for use in job script

  The mcscript package is meant to be called from a user's job file,
  written in Python, e.g., run0001.py.  To use the basic setup code
  and variable definitions provided by mcscript, the job file should
  start with

    import mcscript

  preferably as its first import statement.  This will automatically
  run the setup code.  At its end, the job script should then
  explicitly call the termination code

    mcscript.termination()

  The job script may then access various utility functions, e.g.,

    mcscript.call(["cat"],input_lines=["a","b"])

  The job script may also invoke mcscript's task management features,
  by first registering the tasks and handler functions, then invoking the main loop:
  
  mcscript.task.set_task_list(...)
  mcscript.task.set_phase_handlers(...)
  mcscript.task.task_master()


readme.txt -- mcscript "readme" file
Last modified 9/2/15 (mac).

----------------------------------------------------------------

Getting started

A full manifest of files is given under "Files included in mcscript
distribution".

For guidance on getting started, see the "Setup instructions" below.
Please also be sure to read the the qsubm help message ("qsubm
--help"), which contains complementary information.

Then carefully read and try out the examples runex00.py and runex01.py.

----------------------------------------------------------------


Files included in mcscript distribution

This documentation:

  mcscript.txt

The qsubm utility and example local definitions:

  qsubm.py
  wrapper.csh

  local/qsubm_local_ndcrc.py
  local/qsubm_local_nersc.py
  ...

The basic mcscript infrastructure and example local definitions:

  mcscript.py
  mcscript_utils.py

  local/mcscript_local_ndcrc.py
  local/mcscript_local_nersc.py
  ...

Application-specific modules (for MFDn and LSU3shell):

  ncsm.py
  ncsm_config.py
  mfdn_v14_b06.py
  lsu3shell.py

Illustrative example run script files:

  examples/runex00.py -- basic example of a run (with tutorial comments)
  examples/runex01.py -- example introducing tasks (with tutorial comments)

  examples/runlsu00.py -- example for LSU3shell run on 4He
  examples/runmfdn00.py -- example for MFDn run on 4He (TODO -- test and neaten)

Supporting utilities (you can ignore):

  makedist
  viewtask

----------------------------------------------------------------

[instructions.txt timestamp 9/2/15]

Setup instructions

Python version: Although qsubm is written primarily for Python 3, an
effort is being made to provide backward compatibility with Python 2.7
or higher (through "future" statements and some conditional code).

1) It is assumed that you will set up a few different directories and
set some environment variables so qsubm and mcscript know where to
find them.  The full list of possible variables is described in the
qsubm help message text below.

   At minimum, you will have:

   -- the location for the mcscript Python files (QSUBM_PATH)

   This directory would typically be in your home directory tree
   (e.g., ~/runs/mcscript), but note that it also needs to be
   accessible from the compute nodes.

   -- the location where you will put your run script files
   (QSUBM_RUN_HOME)

   This directory would typically be in your home directory tree
   (e.g., ~/runs).  This also needs to be a valid location for scripts
   to be read by qsub (usually not a problem, but it may need to be
   accessible from the compute nodes).

   -- a working/scratch directory, in which your run script script
   will do its work (QSUBM_WORK_HOME)

   This directory would typically be in fast parallel scratch space.
   Your system configuration might already have an environment
   variable $SCRATCH pointing to your allocated scratch space.  Thus,
   you might set up a directory

      $SCRATCH/runs

   Then, say, when your script run9999.py loads mcscript, this will
   result in mcscript creating the working directory

      $SCRATCH/runs/run9999

A typical .cshrc configuration is:

  # define empty PYTHONPATH
  #
  # Reason: to make sure there is a PYTHONPATH to append to down
  # below, so we can safely append without worrying about whether or
  # not any modules have set one up to append to
  setenv PYTHONPATH

  # configure python
  module load python/3.4
  module load mpi4py

  # qsubm environment definitions
  setenv QSUBM_RUN_HOME ${HOME}/runs
  setenv QSUBM_WORK_HOME ${GSCRATCH}/runs
  setenv QSUBM_RUN_PREFIX run
  setenv QSUBM_PATH ${SCRATCH}/runs/mcscript
  setenv QSUBM_PYTHON /usr/common/usg/python/3.4/bin/python3
  setenv PYTHONPATH ${QSUBM_PATH}:${PYTHONPATH}
  setenv PATH ${QSUBM_PATH}:${PATH}

  # qsubm aliases
  alias qsubm '${QSUBM_PYTHON} ${QSUBM_PATH}/qsubm.py \!*'
  alias cdr 'cd ${QSUBM_WORK_HOME}/${QSUBM_RUN_PREFIX}\!*'

2) Set up symlinks for qsubm_local.py and mcscript_local.py, so that
they point to the appropriate cluster-specific local files from the
"local" subdirectory.  You may wish to use a symbolic link for this,
e.g.:

    cd mcscript
    ln -s local/qsubm_local_nersc.py qsubm_local.py
    ln -s local/mcscript_local_nersc.py mcscript_local.py

You may also wish to set up symlinks for the example runs, if you wish
to try them out them, e.g.:

    cd ${QSUBM_RUN_HOME}
    ln -s ${QSUBM_PATH}/examples/runmfdn00.py
